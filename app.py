import pandas as pd
import altair as alt
import streamlit as st
from datetime import datetime

st.set_page_config(page_title="Relat√≥rio Comercial", layout="wide")

st.title("Relat√≥rio Comercial - Persone")
 
uploaded_file = st.file_uploader("Fa√ßa o upload da base que est√° trabalhando", type=["xlsx"])

if not uploaded_file:
    st.info("Por favor, envie um arquivo para come√ßar.")
    st.stop()

df = pd.read_excel(uploaded_file)
df.columns = df.columns.str.strip()

# lista todas as colunas do tipo data
data_cols = [
    'DATA DO ACIONAMENTO I',
    'DATA DO ACIONAMENTO II',
    'DATA DO ACIONAMENTO III',
    'DATA DO ACIONAMENTO IV'
]

# Convers√£o para datetime
for col in data_cols:
    df[col] = pd.to_datetime(df[col], errors='coerce')
    
# Colunas obrigat√≥rias    
mailing_cols = [
    'ID','ORIGEM', 'C√ìDIGO DA INSTITUI√á√ÉO', 'EMPRESA', 'TELEFONE DA INSTITUI√á√ÉO', 
    'DATA DO ACIONAMENTO I', 'DATA DO ACIONAMENTO II', 'DATA DO ACIONAMENTO III',
    'DATA DO ACIONAMENTO IV', 'FUNIL DE ATENDIMENTO', 'FUNIL DE VENDA' 'TABULA√á√ÉO N1', 'TABULA√á√ÉO N2',
    'TABULA√á√ÉO N3',    'OBSERVA√á√ïES','CONTATO I', '√ÅREA I', 'EMAIL I',
    'TELEFONE CONTATO I', 'CONTATO II', '√ÅREA II', 'EMAIL II',
    'TELEFONE CONTATO II', 'CONTATO III', '√ÅREA III', 'EMAIL III',
    'TELEFONE CONTATO III','SIGLA',
    'TIPO DE EMPRESA', 'DEPEND√äNCIA ADMINISTRATIVA', 'CATEGORIA',
    'GRUPO CONSOLIDADOR', 'N√çVEL DE ENSINO', 'RANGE DE MATR√çCULAS',
    'TOTAL DE MATR√çCULAS', 'TICKET M√âDIO', 'ENDERE√áO', 'N√öMERO',
    'COMPLEMENTO', 'BAIRRO', 'CEP', 'MUNIC√çPIO', 'ESTADO', 'REGI√ÉO', 'SDR RESPONS√ÅVEL'
]

# Filtro por SDR
sdrs = df['SDR RESPONS√ÅVEL'].dropna().unique()
sdr = st.sidebar.multiselect("Filtrar por SDR", sdrs)
df = df[df['SDR RESPONS√ÅVEL'].isin(sdr)] if sdr else df

# Fun√ß√£o de m√©tricas
def calcular_metricas(df_):
    total = len(df_)
    acionados = df_['DATA DO ACIONAMENTO I'].notna().sum()
    cobertura = (acionados / total * 100) if total > 0 else 0
    trabalhados = df_[df_['FUNIL DE ATENDIMENTO'].str.upper() != 'LEAD' ].shape[0]
    falados = df_[df_['FUNIL DE ATENDIMENTO'].isin(['FALADO'])].shape[0]
    falados_validos = df_[df_['FUNIL DE ATENDIMENTO'].isin(['FALADO V√ÅLIDO'])].shape[0]
    agendamentos = df_[df_['FUNIL DE ATENDIMENTO'].isin(['REUNI√ÉO AGENDADA'])].shape[0]
    return total, acionados, cobertura, trabalhados, falados, falados_validos, agendamentos

# Status Geral
st.subheader("Status Geral da Base")
total, acionados, cobertura, *_ = calcular_metricas(df)
col1, col2, col3 = st.columns(3)
col1.metric("LEADS", total)
col2.metric("ACIONADOS", acionados)
col3.metric("COBERTURA", f"{cobertura:.1f}%") 

# Filtros por tempo
today = pd.to_datetime(datetime.now().date())
df_mes = df[df['DATA DO ACIONAMENTO I'].dt.month == today.month]
df_semana = df[df['DATA DO ACIONAMENTO I'].dt.isocalendar().week == today.isocalendar().week]
df_hoje = df[df['DATA DO ACIONAMENTO I'].dt.date == today.date()] 

# M√©tricas por per√≠odo
for label, dfx in {
    "üìÖ Este M√™s": df_mes,
    "üìÜ Esta Semana": df_semana,
    "üìç Hoje": df_hoje
}.items():
    st.subheader(label)
    total, acionados, cobertura, trabalhados, falados, falados_validos, agendamentos = calcular_metricas(dfx)
    col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
    col1.metric("LEADS", total)
    col2.metric("ACIONADOS", acionados)
    col3.metric("COBERTURA", f"{cobertura:.1f}%")
    col4.metric("TRABALHADOS", trabalhados)
    col5.metric("FALADOS", falados)
    col6.metric("FALADOS V√ÅLIDOS", falados_validos)
    col7.metric("REUNI√ÉO AGENDADA", agendamentos)
    
# Funil de Vendas
if 'FUNIL DE ATENDIMENTO' in df.columns:
    st.subheader("üöÄ Funil de Vendas Geral")

    funil_df = (
        df['FUNIL DE ATENDIMENTO']
        .value_counts()
        .reset_index()
    )

    chart = alt.Chart(funil_df).mark_bar().encode(
        x=alt.X('Quantidade:Q', title='Leads'),
        y=alt.Y('Etapa:N', sort='-x', title='Etapas'),
        color='Etapa:N'
    ).properties(width=700, height=300)

    st.altair_chart(chart)

# Tabela opcional
st.subheader("Ver os dados do mailing")
if st.toggle("Mostrar tabela com todos os dados filtrados"):
    st.dataframe(df)